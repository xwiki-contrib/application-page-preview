<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="XWiki.PagePreviewer" locale="">
  <web>XWiki</web>
  <name>PagePreviewer</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1577833200000</creationDate>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1577833200000</date>
  <contentUpdateDate>1577833200000</contentUpdateDate>
  <version>1.1</version>
  <title>Page Previewer</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import groovy.json.JsonBuilder
import groovy.json.JsonOutput

import com.xpn.xwiki.api.Document
import com.xpn.xwiki.web.Utils

import org.xwiki.component.util.DefaultParameterizedType
import org.xwiki.model.reference.DocumentReference
import org.xwiki.resource.ResourceReferenceResolver
import org.xwiki.resource.ResourceTypeResolver
import org.xwiki.url.ExtendedURL
  
// Converts a relative URL path to an EntityReference
DocumentReference convertPathToDocumentReference(String path) {
  def serverUrl = xcontext.URLFactory.getServerURL(xcontext.context)
  def url = serverUrl.toURI().resolve(path).toURL()
  // Code copied from XWiki#initializeResourceFromURL
  def extendedUrl = new ExtendedURL(url, xcontext.request.contextPath)
  def typeResolver = Utils.getComponent(new DefaultParameterizedType(null, ResourceTypeResolver.class, ExtendedURL.class))
  def type = typeResolver.resolve(extendedUrl, Collections.&lt;String, Object&gt;emptyMap())
  def resourceResolver = Utils.getComponent(new DefaultParameterizedType(null, ResourceReferenceResolver.class, ExtendedURL.class))
  def reference = resourceResolver.resolve(extendedUrl, type, Collections.&lt;String, Object&gt;emptyMap())
  if (reference != null) {
    return new DocumentReference(reference.entityReference)
  }
  return null
}

// Returns the relative path of first attached image, if any
String maybeGetImageUrl(Document page) {
  for (Object attachment : page.attachmentList) {
    if (attachment.isImage()) {
      return page.getAttachmentURL(attachment.filename)
    }
  }
  return null
}

def path = request.path
if ((path != null)&amp;&amp;(path!="")&amp;&amp;(path!="undefined")) {
  response.setContentType('application/json')
  def reference = convertPathToDocumentReference(path)
  def content = ""
  def imageUrl = null
  // Don't render this page itself in case there's a link to it because it will loop
  if (reference != doc.documentReference) {
    def page = xwiki.getDocument(reference)
    def pageContent = page.getValue("definition");
    if (pageContent==null||pageContent=="")
     pageContent = page.content
    content = page.getRenderedContent(pageContent, page.syntaxId, "html/5.0")
    imageUrl = maybeGetImageUrl(page)
  } else {
    content = "&lt;p&gt;PagePreviewer is an extension used for displaying page preview popovers on page links.&lt;/p&gt;"
  }
  def builder = new JsonBuilder()
  builder {
    html "$content"
  }
  if (imageUrl != null) {
    builder.content.image = imageUrl
  }
  println(builder.toString())
} else if (1==0) {

  println "{{info}}"
  println "This page contains a script which returns an HTML preview of a given page. By default, it is called automatically for the ##.wikilink## and ##.wikiinternallink## CSS selectors on all pages of the wiki on which it is installed."
  println ""
  println "The script returns a JSON object containing:"
  println "* The rendered content of the page corresponding to the path given as parameter in the request."
  println "* The relative URL of the first image attached to that page, if any."
  println ""
  println "A typical input / output consists of:"
  println "* Input: ##/XWiki/PagePreviewer?path=/xwiki/wiki/sandbox/view/Sandbox/&amp;xpage=plain&amp;outputSyntax=plain##"
  println "* Output:\n##{\n  \"html\": \"&lt;p&gt;Lorem ipsum dolor sit amor.&lt;/p&gt;\",\n  \"image\": \"/xwiki/wiki/kuava/download/Sandbox/WebHome/XWikiLogo.png?rev=1.1\"\n}##"
  println "{{/info}}"

} else {
  return ""
}
{{/groovy}}

</content>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fefcfc33-52af-4a05-a0a8-a73aecc5c834</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>
var XWiki = (function (XWiki) {
  function strip_tags(input, allowed) {
//  discuss at: http://phpjs.org/functions/strip_tags/
// original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
// improved by: Luke Godfrey
// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
//    input by: Pul
//    input by: Alex
//    input by: Marc Palau
//    input by: Brett Zamir (http://brett-zamir.me)
//    input by: Bobby Drake
//    input by: Evertjan Garretsen
// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
// bugfixed by: Onno Marsman
// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
// bugfixed by: Eric Nagel
// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
// bugfixed by: Tomasz Wesolowski
//  revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl/)
//   example 1: strip_tags('&lt;p&gt;Kevin&lt;/p&gt; &lt;br /&gt;&lt;b&gt;van&lt;/b&gt; &lt;i&gt;Zonneveld&lt;/i&gt;', '&lt;i&gt;&lt;b&gt;');
//   returns 1: 'Kevin &lt;b&gt;van&lt;/b&gt; &lt;i&gt;Zonneveld&lt;/i&gt;'
//   example 2: strip_tags('&lt;p&gt;Kevin &lt;img src="someimage.png" onmouseover="someFunction()"&gt;van &lt;i&gt;Zonneveld&lt;/i&gt;&lt;/p&gt;', '&lt;p&gt;');
//   returns 2: '&lt;p&gt;Kevin van Zonneveld&lt;/p&gt;'
//   example 3: strip_tags("&lt;a href='http://kevin.vanzonneveld.net'&gt;Kevin van Zonneveld&lt;/a&gt;", "&lt;a&gt;");
//   returns 3: "&lt;a href='http://kevin.vanzonneveld.net'&gt;Kevin van Zonneveld&lt;/a&gt;"
//   example 4: strip_tags('1 &lt; 5 5 &gt; 1');
//   returns 4: '1 &lt; 5 5 &gt; 1'
//   example 5: strip_tags('1 &lt;br/&gt; 1');
//   returns 5: '1  1'
//   example 6: strip_tags('1 &lt;br/&gt; 1', '&lt;br&gt;');
//   returns 6: '1 &lt;br/&gt; 1'
//   example 7: strip_tags('1 &lt;br/&gt; 1', '&lt;br&gt;&lt;br/&gt;');
//   returns 7: '1 &lt;br/&gt; 1'

allowed = (((allowed || '') + '')
.toLowerCase()
.match(/&lt;[a-z][a-z0-9]*&gt;/g) || [])
.join(''); // making sure the allowed arg is a string containing only tags in lowercase (&lt;a&gt;&lt;b&gt;&lt;c&gt;)
var tags = /&lt;\/?([a-z][a-z0-9]*)\b[^&gt;]*&gt;/gi,
commentsAndPhpTags = /&lt;!--[\s\S]*?--&gt;|&lt;\?(?:php)?[\s\S]*?\?&gt;/gi;
commentsAndPhpTags2 = /&lt;!\[[\s\S]*?&lt;!\[[\s\S]*?&gt;/gi;
if (input==null)
  return "";
return input.replace(commentsAndPhpTags, '').replace(commentsAndPhpTags2, '')
.replace(tags, function($0, $1) {
  return allowed.indexOf('&lt;' + $1.toLowerCase() + '&gt;') &gt; -1 ? $0 : '';
});
}
  var inProgress = false;
  var activate = false;
  var previewGlossary = false;
  var previewWikiLinks = false;
  var previewMenu = false;
  var previewSearch = false;
  var thumbnail = false;
  var maxBlocks = 10;
  var validTags = 'div,b,i,u,p,ul,ol,li,strong,h1,h2,h3,h4,h5,span,img,table,tbody,thead,td,tr,th';
  var previewSelector = undefined;
  
#set($itemDoc = $xwiki.getDocument("XWiki.PagePreviewerConfig"))
#set($ok = $itemDoc.use("XWiki.PagePreviewerConfigClass"))
#if($itemDoc.getValue("previewglossary") == 1)
 previewGlossary = true;
#end
#if($itemDoc.getValue("previewwikilinks") == 1)
 previewWikiLinks = true;
#end
#if($itemDoc.getValue("previewmenu") == 1)
 previewMenu = true;
#end
#if($itemDoc.getValue("previewsearch") == 1)
 previewSearch = true;
#end
#if($itemDoc.getValue("thumbnail") == 1)
 thumbnail = true;
#end
#if($itemDoc.getValue("maxblocks") == 1)
 maxBlocks = $itemDoc.getValue("maxblocks");
#end
#if($itemDoc.getValue("validtags") == 1)
 validTags = "$itemDoc.getValue("validtags")";
#end
#if($itemDoc.getValue("activate") == 1)
 activate = true;
#end
#if("$!itemDoc.getValue('previewselector')" != '')
  previewSelector = "$itemDoc.getValue('previewselector')"
#end

  var debug = false;

  function init() {
    require(['jquery', 'bootstrap'], function ($, bootstrap) {
      var reference = XWiki.Model.resolve('XWiki.PagePreviewer', XWiki.EntityType.DOCUMENT);
      var serviceUrl = (new XWiki.Document(reference)).getURL();
      var settings = {
        trigger: 'hover',
        placement: 'auto bottom',
        container: 'body',
        delay: { 'show': 500, 'hide': 1000 },
        html: true,
        // selector: ''.wikigeneratedlinkcontent'',
        title: function()
        {
          return $(this).text();
        },
        content: function() {
          // Add a class to the displayed popover.
          $(this).data('bs.popover').tip().addClass('page-preview-popover');
          if (inProgress)
            return "";
          inProgress = true;
          if (debug) 
            console.log("Launching page preview request");
          // Create a random temporary id for the content's parent div
          // with a unique number just in case.
          var contentId = 'content-' + $.now();
          var imageId = 'image-' + $.now();
          var path = $(this).attr('href');
          if (!path || path=="")
             path = $(this).parent().attr('href');
          if (debug)
           console.log("Path: " + path)
          if (path) {
          $.ajax({
            type: 'GET',
            url: serviceUrl + '?xpage=plain&amp;outputSyntax=plain&amp;path=' + encodeURIComponent(path),
            cache: false,
          }).done( function(data) {
            if (debug)
              console.log("Got result from page preview");
            var linkedPageContent = $('&lt;div&gt;' + data.html + '&lt;/div&gt;');
            if (debug)
               console.log(data.html);
            var blocks = linkedPageContent.children(validTags);
            var content = '';
            if (debug)
               console.log(blocks)
            if (blocks.size() &gt; 0) {
               for (var i=0;i&lt;blocks.size();i++) {
                 if (i&gt;=maxBlocks)
                    break;
                 content += blocks[i].outerHTML;
                 if (debug)
                   console.log("Found " + blocks[i].outerHTML)
               }
              if (debug)
                console.log("Found " + i + " blocks")
            }
            // stripping tags
            var allowed = '&lt;' + validTags.replace(/,/g,"&gt;&lt;") + '&gt;'
            if (thumbnail)
               allowed = allowed.replace("&lt;img&gt;", "")
            if (debug)
               console.log(allowed)
            content = strip_tags(content, allowed);
            if (debug)
               console.log(content)

            var imageUrl = data.image;
            if (debug)
               console.log(imageUrl)
            var marginTop = '0';
            if (imageUrl &amp;&amp; imageUrl.length &gt; 0 &amp;&amp; thumbnail) {
              $('#' + imageId).html('&lt;div class="col-md-12" style="text-align:center"&gt;&lt;img src="' + imageUrl + '" /&gt;&lt;/div&gt;');
              marginTop = '1em';
            }
            $('#' + contentId).html('&lt;div class="col-md-12" style="margin-top:' + marginTop + '"&gt;' + content + '&lt;/div&gt;');
            inProgress = false;
            if (debug) {
              console.log("Final Data ready");
              console.log(content);
            }
          });

          var output = '';
          output += '&lt;div class="row" id="' + imageId + '"&gt;';
          output +=   '&lt;div class="col-md-12"&gt;&lt;/div&gt;';
          output += '&lt;/div&gt;';
          output += '&lt;div class="row" id="' + contentId + '"&gt;';
          output +=   '&lt;div class="col-md-12"&gt;&lt;span class="fa fa-spinner fa-pulse"/&gt;&lt;/div&gt;';
          output += '&lt;/div&gt;';
          if (debug)
            console.log("Popup active");
          return output;
         }
          return null;
        }
      }

      // Enable popovers only for not touch-only browsers
      var regex = /Android|iPhone|iPad|Opera Mini/i;
      var match = navigator.userAgent.match(regex);
      if (match == null || match.length == 0) {
       if (activate) {
        if (previewWikiLinks)
         $('#xwikicontent .wikilink a').popover(settings);
        else if (previewGlossary)
         $('#xwikicontent .glossary-entry').popover(settings);

        if (previewMenu)
         $('.menu .wikilink a').popover(settings);

        if (previewSearch)
        $('.search-result-title a').popover(settings);
         if (previewSelector) {
           $(previewSelector).popover(settings);
         }
       }
      }
    });
  }
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>JSX</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>ff71073e-ef27-45ca-9557-9db01a8216b8</guid>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <name>XWiki.PagePreviewer</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>25b7d8bb-c7df-4550-ab84-75e98c61aa2b</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>short</cache>
    </property>
    <property>
      <code>.page-preview-popover .arrow {
  visibility:hidden;
}

#set($itemDoc = $xwiki.getDocument("XWiki.PagePreviewerConfig"))
#set($ok = $itemDoc.use("XWiki.PagePreviewerConfigClass"))
#set($width="500")
#set($newWidth = $itemDoc.getValue("width"))
#if($newWidth)
 #set($width=$newWidth)
#end
#set($height="")
#set($newHeight = $itemDoc.getValue("height"))
#if($newHeight)
 #set($height=$newHeight)
#end
.page-preview-popover {
  min-width: $!{width}px;
  overflow-x: hidden;
#if($height!="")
  max-height: $!{height}px;
  overflow-y: hidden;
#end
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>SSX</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
</xwikidoc>
